/*
This file computes the unit normal vector on all nodes.
For interior nodes, n = (0,0).

return the x and y components of the normal vector on all dof:
real[int] Nx(Vh.ndof), Ny(Vh.ndof)

by Longfei Li 12102015
*/


{
// use boundary integral to convert normal on edge to normal on nodes.
varf nxVarf(unsued,phi)=int1d(Th,qforder=quadOrder)(N.x*phi);
varf nyVarf(unsued,phi)=int1d(Th,qforder=quadOrder)(N.y*phi);

Nx = nxVarf(0,Vh);
Ny = nyVarf(0,Vh);



for(int i=0;i<Vh.ndof;i++)
{
real Nnorm;
Nnorm = sqrt(Nx[i]^2+Ny[i]^2);
if (Nnorm!=0)
{
Nx[i] /= Nnorm;      //normalize the vector
Ny[i] /= Nnorm;
}

bool isBoundaryNodes=false;
checkIsBoundaryNode(i);  // check if node i is a boundary node

if(isBoundaryNodes)  //boundary nodes
{
bNodes.resize(bNodes.n+1); // add one more slot in bNodes
bNodes(bNodes.n-1) = i;    // put the index i in bNodes
}

}

//fix corner normal //note: this is hard coded for unit square [0,1]x[0,1]
if(periodic)
{
for(int b=0; b<bNodes.n;b++)
{
int gIndex = bNodes[b]; //global index of the boundary nodes
 if(Px[gIndex]==1 & Py[gIndex]==0) //(1,0)
{
Nx[gIndex]=0;
Ny[gIndex]=-1;
}
if(Px[gIndex]==1 & Py[gIndex]==1) //(1,1)
{
Nx[gIndex]=0;
Ny[gIndex]=1;
}
if(Px[gIndex]==0 & Py[gIndex]==0) //(0,0)
{
Nx[gIndex]=0;
Ny[gIndex]=-1;
}
if(Px[gIndex]==0 & Py[gIndex]==1) //(0,1)
{
Nx[gIndex]=0;
Ny[gIndex]=1;
} 
}
}


} // variables defined in this file out of scope here
