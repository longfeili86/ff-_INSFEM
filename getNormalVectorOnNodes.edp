/*
This file computes the unit normal vector on all nodes.
For interior nodes, n = (0,0).

return the x and y components of the normal vector on all dof:
real[int] Nx(Vh.ndof), Ny(Vh.ndof)

by Longfei Li 12102015
*/


{
// use boundary integral to convert normal on edge to normal on nodes.
varf nxVarf(unsued,phi)=int1d(Th,qforder=quadOrder)(N.x*phi);
varf nyVarf(unsued,phi)=int1d(Th,qforder=quadOrder)(N.y*phi);

Nx = nxVarf(0,Vh);
Ny = nyVarf(0,Vh);
temp = x; 
real[int] Px=temp[]; // x-coordinates
temp = y; 
real[int] Py=temp[]; // y-coordinates



for(int i=0;i<Vh.ndof;i++)
{
real Nnorm;
Nnorm = sqrt(Nx[i]^2+Ny[i]^2);
if (Nnorm!=0)
{
Nx[i] /= Nnorm;      //normalize the vector
Ny[i] /= Nnorm;
}

int lbValue = lb[][i];
if(lbValue>0)  //boundary nodes
{
bNodes.resize(bNodes.n+1); // add one more slot in bNodes
bNodes(bNodes.n-1) = i;    // put the index i in bNodes
}

bool printNormal=false;
if(printNormal)
{
cout <<"(" <<Px[i] << "," << Py[i] << ")= "
     <<"(" <<Nx[i] << "," << Ny[i] << "), "
     <<"label = " << lbValue << endl;
}
}
} // variables defined in this file out of scope here