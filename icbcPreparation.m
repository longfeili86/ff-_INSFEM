function icbcPreparation(Uib,Vib,Pib,nb,filename)
%===========================================================================
% This function writes the specified initial and boundary conditions
% Uib,Vib into filename.edp file for FF++ code to use
%
% by Longfei Li 12142015
%===========================================================================

% Input:
%    Uib: an array of strings that defines i&b functions: u0, u1,... un. 
%    Vib: an array of strings that defines i&b functions: v0, v1,... vn.
%    Pib: an array of strings that defines i&b functions: p0 for now....
%     nb: number of boundaries of the domain
%    filename: name of the output .edp file

% Output:
%   filename.edp file that contains the definitions of FF++ functions
  
if(length(Uib)~=nb+1 || length(Vib)~=nb+1 )
    fprintf('MATLAB: the number of bc for U or for V does not match the number of boundaries.\n');
    fprintf('Please specify 1 ic and %d bcs for each of U and V\n',nb);
end


filename = strcat(filename,'.edp');
fprintf('MATLAB: Generating %s\n',filename);

fid = fopen(filename,'w'); % discard existiing contents.
fprintf(fid,'//================DO NOT MODIFY===========================\n');
fprintf(fid,'//This script was generated by icbcPreparation.m \n');
fprintf(fid,strcat('//',datestr(now),'\n'));
fprintf(fid,'//========================================================\n');
fprintf(fid,'\n\n\n');


% write initial functions
fprintf(fid,'func real[int] u0Func(real t)\n{\n');
fprintf(fid,'Vh ff = %s;\n',Uib(1));
fprintf(fid,'return ff[];\n}');
fprintf(fid,'\n\n\n');

fprintf(fid,'func real[int] v0Func(real t)\n{\n');
fprintf(fid,'Vh ff = %s;\n',Vib(1));
fprintf(fid,'return ff[];\n}');
fprintf(fid,'\n\n\n');

fprintf(fid,'func real[int] p0Func(real t)\n{\n');
fprintf(fid,'Vh ff = %s;\n',Pib(1));
fprintf(fid,'return ff[];\n}');
fprintf(fid,'\n\n\n');

% write boundary functions



% write some unused functions to file to make both tz and non-tz tests work
% thanks to the FF++ syntax
fprintf(fid,'//Write some unused functions to file to make both tz and non-tz\n');
fprintf(fid,'//tests work thanks to the FF++ syntax.\n\n');
Exact.ueFunc = '0';
Exact.veFunc = '0';
Exact.peFunc = '0';
Exact.fuFunc = '0';
Exact.fvFunc = '0';
Exact.fpFunc = '0';
fields = fieldnames(Exact);
for i=1:numel(fields)
    fprintf(fid,'func real[int] %s(real t)\n{\n',fields{i});
    fprintf(fid,'Vh ff = %s;\n\n',Exact.(fields{i}));
    fprintf(fid,'return ff[];\n}');
 
    fprintf(fid,'\n\n\n');
end
fclose(fid);

return





