/*
This file constructs matrix for the momentum equation: vMatrix
Dirichelt BC is applied on all boundaries.

by Longfei Li 12112015
*/

{
vMatrix = rho*M;
if(ts=="IMEX"|ts=="IMEXPC")
{
vMatrix = vMatrix+0.5*dt*mu*S;
}


// implement BC for vMatrix
int [int] I(0), Inew(0);
int [int] J(0), Jnew(0);
real[int] C(0), Cnew(0);
[I,J,C] = vMatrix;  

//make a copy of interior rows
for(int i=0;i<I.n;i++)
{
int rowNumber = I[i];
if(lb[][rowNumber]==0)  // interior equations
{
// If rowNumber is interior, the matrix is unchanged
Inew.resize(Inew.n+1); Inew[Inew.n-1] = I[i];
Jnew.resize(Jnew.n+1); Jnew[Jnew.n-1] = J[i];
Cnew.resize(Cnew.n+1); Cnew[Cnew.n-1] = C[i];	  
}
}

// get boundary rows. Use boundary rows from identity matrix
real[int] Cb(bNodes.n);
Cb=1.; 

//combine interior rows and boundary rows
Inew = [Inew,bNodes];
Jnew = [Jnew,bNodes];
Cnew = [Cnew,Cb];

//update vMatrix
vMatrix=[Inew,Jnew,Cnew];


// write matrix to file
if(writeMatrixToFile) 
{
writeSparseMatrixToMfile(I,J,C,I.n,dataFolderName,"vMatrixBeforeBC");
writeSparseMatrixToMfile(Inew,Jnew,Cnew,Inew.n,dataFolderName,"vMatrixAfterBC");
}// file objects are closed at the end of the block

} // variables defined in this file out of scope here




