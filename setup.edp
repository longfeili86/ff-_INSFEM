/* This file setup the code according the options specified in runScript.edp

by Longfei Li 12102015
*/

include "funcDef.edp"    //define some utility functions
if(runName=="")
{
cout << "runName can not be empty\n";
assert(false);
}
cout << "\n\nSetting up to run: " << runName << endl;
// create the dataFolder to store results
string dataFolderName = outputDir+runName; // Longfei 09182018: we might missing "/" between outputDir and runName
exec("mkdir -p "+dataFolderName);

// keep a log file to save information
string logFile=dataFolderName+"/"+"log.text";
exec("sysDateTimeInfo.pl -file="+logFile);// write date info using a perl script to logfile

//read mesh and do mesh refinement is splitNumber>1
mesh Th = readmesh("mesh/"+meshName+".msh");
assert(splitNumber>=1);
if (splitNumber>1)
{
Th = trunc(Th,1,split=splitNumber,label=0);
}
if(isPlot)
{
plot(Th,wait=0, ps=dataFolderName+"/grid.eps");
}



cout << "nv = " << Th.nv <<endl;
cout << "nt  = " << Th.nt <<endl;


// define Pn finite element space
if(pn==3){load "Element_P3"}
if(pn==4){load "Element_P4"}
fespace VH;
Vh lb = label;  // label number of all dof, interior=0, otherwise positive int
Vh h=hTriangle; // size of triangle
cout << "ndof="<<Vh.ndof<<endl;


// define some FE functions
Vh phi;   // basis function
Vh temp;  // a temp FE function to hold stuff


//get the normal vector on all nodes. For interoir nodes n=(0,0).
real[int] Nx(Vh.ndof), Ny(Vh.ndof);  // x and y components of the normal vector
int[int] bNodes(0);  //global index of boundary nodes
temp = x; 
real[int] Px=temp[]; // x-coordinates
temp = y; 
real[int] Py=temp[]; // y-coordinates

//FE functions Nx, Ny, lb (label) is defined in the following file:
include "getNormalVectorOnNodes.edp" 


real ns=0.;  // for stokes equations
if(NS==true){ns=1;} // for NS equations
include funcDefFILE

//determine time-step
real dt=0.;
include "getDt.edp"


// get FEM matrices
matrix M,S,Lx,Ly,Sxx,Sxy,Syy;
include "getFEMMatrices.edp"

//construct matrices for momentum equations and PPE
//boundary condition for the matrices is implemented here
matrix vMatrix; //Matrix for momentum equation
matrix pMatrix; //Matrix for PPE
include "getvMatrix.edp"
include "getpMatrix.edp"


set(vMatrix,solver=vSOLVER);  // this causes mem leak. A FreeFEM++ bug.
set(pMatrix,solver=pSOLVER);



real timer=clock();  // timer start
include "solve.edp"    // solve the INS
timer=clock()-timer;
cout << "Total time used to solve: " <<  timer << endl;




{// write basic info to log file:
  ofstream oFile(logFile,append);
  oFile << "Final time reached. Done solving.\n";
  oFile << "***************** summary ******************\n"
	<< "Total number of steps: "<< nstep << " (steps)\n"
	<< "Total running time: "<< timer << " (s)\n"
	<< "Average time per step: " << timer/nstep <<  " (s)\n"
	<< "********************************************\n";
}// 
