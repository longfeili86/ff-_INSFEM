/*
This file integrates the system to t[new]

by Longfei Li 12152015
*/

{
Vh rhsu;
Vh rhsv;

Vh MUcur;
Vh MVcur;

varf MUcurVarf(unused,phi) = int2d(Th,qforder=quadOrder)(rho*uh[cur]*phi);
varf MVcurVarf(unused,phi) = int2d(Th,qforder=quadOrder)(rho*vh[cur]*phi);
MUcur[] = MUcurVarf(0,Vh);
MVcur[] = MVcurVarf(0,Vh);


string curStepping="FE";    //current timestepping method to use


//predictor step
if( (ts=="AB2" | ts=="PC2") & (isTwilightzone | step>0) ) // use FE for non-tz test for the first step
{
curStepping = "AB2";
}
else if((ts=="IMEX" | ts=="IMEXPC") &  (isTwilightzone | step>0) )
{
curStepping = "IMEXPRE";
}

cout<< "curStepping=" << curStepping << endl;
include "getVelocityRHS.edp"   //get RHS for the current step
include "implementVelocityBCforRHS.edp"  //implement Dirichlet BC for velocity rhs
uh[new][] = vMatrix^-1*rhsu[];
vh[new][] = vMatrix^-1*rhsv[];

include "pressureSolve.edp"

//test=====================
ph[new][] = peFunc(t[new]);
Vh err; err[] = ueFunc(t[new]); err=err-uh[new];
plot(err,fill=1,value=1);
//test=====================

//corrector step




//corrector step

}// varibles defined in this file go out of scope here