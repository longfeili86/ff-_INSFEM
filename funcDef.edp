/*
This file defines some utility functions

by Longfei Li 12112015
*/


func int writeSparseMatrixToMfile(int[int] I, int[int] J, real[int] C, int sz,string matrixName,string dir)
{
// this function writes a sparse matrix M = sparse(I,J,C), sz = length(I) 
// to dir/matrixName.m 
{
string fileName = dir+"/"+matrixName+"File.m";
ofstream oFile(fileName);
oFile << "I=[";
for(int i=0;i<sz;i++){oFile<<" "<< I[i]; if(i%10==0 & i>1){oFile<<" ...\n";}}
oFile << "];\n\n";

oFile << "J=[";
for(int i=0;i<sz;i++){oFile<<" "<< J[i]; if(i%10==0 & i>1){oFile<<" ...\n";}}
oFile << "];\n\n";

oFile << "C=[";
for(int i=0;i<sz;i++){oFile<<" "<< C[i]; if(i%10==0 & i>1){oFile<<" ...\n";}}
oFile << "];\n\n";

oFile<< "I=I+1; J=J+1; %matlab index starts at 1\n";
oFile<< matrixName << " = sparse(I,J,C);\n\n";
} //file object is deleted at the end of block

return 0;

}




func int writeRealArrayToMFile(real[int] I,int sz,string comment,string arrayName,string dir)
{
// This function writes a real array to Dir/arrayNameFile.m 
string fileName = dir+"/"+arrayName+"File.m";
ofstream oFile(fileName);
oFile << "%" << comment << endl; 
oFile << arrayName<<"=[";
for(int i=0;i<sz;i++){oFile<<" "<< I[i]; if(i%10==0 & i>1){oFile<<" ...\n";}}
oFile << "];\n\n";

return 0;
}

// write the DOFs of the fespace to an M file.
// note that for periodic bc and pn for n>2, 
// the mesh vertices are different from the DOFs
macro WRITEDOFTOMFILE(Name,dir)
{
string fileName = dir+"/"+Name+"File.m";
ofstream oFile(fileName);
cout << "writting DOF to " << fileName << endl;
 
oFile << "% number of nodes: "     << Vh.ndof << endl;
oFile << "% number of elements: "  << Vh.nt   << endl;

oFile << "\n\n%coordinates:\n";
oFile << "T.coordinates=[\n";
for (int n = 0; n < Vh.ndof; n++) {
  oFile << Px[n]<<" "<<Py[n]<<endl; 
}
oFile << "];\n";

oFile << "\n\n%connectivity on each element:\n";
oFile << "T.elements=[\n";
for (int e = 0; e < Vh.nt; e++) {
 for (int n = 0; n < Vh.ndofK; n++)
   oFile << Vh(e, n) + 1 << " ";
  oFile << endl;
 }
oFile << "];\n";
} //EOM



//check if a node i is a boundary nodes
macro checkIsBoundaryNode(i)
{
int lbValue = lb[][i];

if(periodic)
{
isBoundaryNodes=( (lbValue==1 | lbValue==3) |( Px[i]==1 & Py[i]==0));
}
else
{
isBoundaryNodes = (lbValue>0);
}

} //EOM













