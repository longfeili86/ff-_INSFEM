/*
This file plots and/or saves the results at cur time

by Longfei Li 12172015
*/

{
//compute div
int tl=cur; // time level
div = dx(uh[tl])+dy(vh[tl]);
curl = dx(vh[tl])-dy(uh[tl]); //old not accurate
 // temp=dx(vh[tl])-dy(uh[tl]); 
 // solve CurlProj(curl,phi)=int2d(Th,qforder=quadOrder)(curl*phi)-int2d(Th,qforder=quadOrder)( temp*phi)+on(1,2,3,4,curl=0);
// solve for streamfunction laplace(psi)=-curl;
 real cd,cl,dp; //drag, lift and pressure difference for the FPC test:
 if(isFPC)
   {

     dp=ph[tl](0.15,0.5)-ph[tl](0.25,0.5);
     
     real nu=mu/rho;
     cd=-20*(int1d(Th,qforder=quadOrder,5)(nu*(dx(uh[tl])*N.x+dy(uh[tl])*N.y)-ph[tl]*N.x ));
     cl= -20*(int1d(Th,qforder=quadOrder,5)(nu*(dx(vh[tl])*N.x+dy(vh[tl])*N.y)-ph[tl]*N.y ));
     cout << "1. t="<<t[tl]<<", [cd,cl,dp]=["<<cd<<", "<< cl << ", "<< dp << "]" << endl;

     // Vh utan=uh[tl]*N.y-vh[tl]*N.x;
     // cd=-20*(int1d(Th,qforder=quadOrder,5)(nu*(dx(utan)*N.x+dy(utan)*N.y)*N.y-ph[tl]*N.x ));
     // cl=20*(int1d(Th,qforder=quadOrder,5)(nu*(dx(utan)*N.x+dy(utan)*N.y)*N.x+ph[tl]*N.y));
     //
     // cout << "2. t="<<t[tl]<<", [cd,cl,dp]=["<<cd<<", "<< cl << ", "<< dp << "]" << endl;

      {// write to file:
	string variableName="dlp"+counter;
	string filename=dataFolderName+"/"+variableName+"File.m";
	ofstream oFile(filename);
	oFile<< variableName<< "=["<< cd << ", "<< cl <<", " << dp << "];"<<endl;
      }// 
     
   }
 
if(isPlot)
{
plot(uh[tl],wait=vwait,fill=vfill,value=vvalue,cmm=info+"u at t="+t[tl],ps=dataFolderName+"/u"+counter+".eps");
plot(vh[tl],wait=vwait,fill=vfill,value=vvalue,cmm=info+"v at t="+t[tl],ps=dataFolderName+"/v"+counter+".eps");
plot(ph[tl],wait=vwait,fill=vfill,value=vvalue,cmm=info+"p at t="+t[tl],ps=dataFolderName+"/p"+counter+".eps");
plot(div   ,wait=vwait,fill=vfill,value=vvalue,cmm=info+"div at t="+t[tl],ps=dataFolderName+"/div"+counter+".eps");
plot(curl  ,wait=vwait,fill=vfill,value=vvalue,cmm=info+"curl at t="+t[tl],ps=dataFolderName+"/curl"+counter+".eps");
// plot on finer mesh if higher-order elements are used
bool plotOnFinerMeshForHighOrderMethods=false;
if(pn>1 & plotOnFinerMeshForHighOrderMethods)
{
cout << "interpolate solution to finer mesh to plot\n";

 {// write log file:
   ofstream oFile(logFile,append);
   oFile <<  "interpolate solution to finer mesh to plot\n";
 }// 


mesh ThRefined= trunc(Th,1,split=pn,label=0);
fespace VhPlot(ThRefined,P1);
VhPlot uPlot,vPlot,pPlot,divPlot,curlPlot;
// = will interpolate automatically
uPlot = uh[tl];
vPlot = vh[tl];
pPlot = ph[tl];
curlPlot = curl;
divPlot=div;
plot(uPlot,wait=vwait,fill=vfill,value=vvalue,cmm=info+"uR at t="+t[tl],ps=dataFolderName+"/uR"+counter+".eps");
plot(vPlot,wait=vwait,fill=vfill,value=vvalue,cmm=info+"vR at t="+t[tl],ps=dataFolderName+"/vR"+counter+".eps");
plot(pPlot,wait=vwait,fill=vfill,value=vvalue,cmm=info+"pR at t="+t[tl],ps=dataFolderName+"/pR"+counter+".eps");
plot(divPlot,wait=vwait,fill=vfill,value=vvalue,cmm=info+"divR at t="+t[tl],ps=dataFolderName+"/divR"+counter+".eps");
plot(curlPlot,wait=vwait,fill=vfill,value=vvalue,cmm=info+"curlR at t="+t[tl],ps=dataFolderName+"/curlR"+counter+".eps");
}
}
if(saveDataForMATLAB)
{
  writeRealArrayToMFile(uh[tl][],uh[tl][].n,"u","u"+counter,dataFolderName);
  writeRealArrayToMFile(vh[tl][],vh[tl][].n,"v","v"+counter,dataFolderName);
  writeRealArrayToMFile(ph[tl][],ph[tl][].n,"p","p"+counter,dataFolderName);
  writeRealArrayToMFile(div[],div[].n,"div","div"+counter,dataFolderName);
  writeRealArrayToMFile(curl[],curl[].n,"curl","curl"+counter,dataFolderName);
}

// tz tests
if(isTwilightzone)
{
// update exact solution for tz tests
ue[] = ueFunc(t[tl]);
ve[] = veFunc(t[tl]);
pe[] = peFunc(t[tl]);
// compute errors for tz tests
erru = abs(uh[tl]-ue);
errv = abs(vh[tl]-ve);
errp = abs(ph[tl]-pe);
divL2 = sqrt(int2d(Th,qforder=quadOrder)((dx(uh[tl])+dy(vh[tl]))^2));



cout << "max norm [erru,errv,errp,div] = [" << erru[].max << ", "
     	     	  		       	       		      << errv[].max << ", "
							      << errp[].max << ", "
							      << div[].max << "]\n";
							      

if(isPlot)
{
plot(erru,wait=vwait,fill=vfill,value=vvalue,cmm=info+"error u at t="+t[tl],ps=dataFolderName+"/erru"+counter+".eps");
plot(errv,wait=vwait,fill=vfill,value=vvalue,cmm=info+"error v at t="+t[tl],ps=dataFolderName+"/errv"+counter+".eps");
plot(errp,wait=vwait,fill=vfill,value=vvalue,cmm=info+"error p at t="+t[tl],ps=dataFolderName+"/errp"+counter+".eps");
}
if(saveDataForMATLAB)
{
  writeRealArrayToMFile(erru[],erru[].n,"error of u","erru"+counter,dataFolderName);
  writeRealArrayToMFile(errv[],errv[].n,"error of v","errv"+counter,dataFolderName);
  writeRealArrayToMFile(errp[],errp[].n,"error of p","errp"+counter,dataFolderName);
}

}
}//variables defined in this file go out of scope here
