/*
This file implements the WABE pressure BC for pMatrix

by Longfei Li 12112015
*/


int[int]  Ix(0), Iy(0), IP(0), IPnew(0);
int[int]  Jx(0), Jy(0), JP(0), JPnew(0);
real[int] Cx(0), Cy(0), CP(0), CPnew(0);
[Ix,Jx,Cx] = Lx;
[Iy,Jy,Cy] = Ly;
[IP,JP,CP] = pMatrix;

//make a copy of interior rows
for(int i=0;i<IP.n;i++)
{
int rowNumber = IP(i);
if(lb[][rowNumber]==0)  // interior equations
{
// If rowNumber is interior, the matrix is unchanged
IPnew.resize(IPnew.n+1); IPnew(IPnew.n-1) = IP(i);
JPnew.resize(JPnew.n+1); JPnew(JPnew.n-1) = JP(i);
CPnew.resize(CPnew.n+1); CPnew(CPnew.n-1) = CP(i);	  
}
}


// get boundary rows.
//  boundary rows from Nx(i)*Lx(i,:)
for (int i =0;i<Ix.n;i++)
{
int rowNumber = Ix(i);
if(lb[][rowNumber]>0) //boundary nodes
{
IPnew.resize(IPnew.n+1); IPnew(IPnew.n-1) = Ix(i);
JPnew.resize(JPnew.n+1); JPnew(JPnew.n-1) = Jx(i);
CPnew.resize(CPnew.n+1); CPnew(CPnew.n-1) = Nx(rowNumber)*Cx(i);	  
}
}

//  boundary rows from Ny(i)*Ly(i,:)
for (int i =0;i<Iy.n;i++)
{
int rowNumber = Iy(i);
if(lb[][rowNumber]>0) //boundary nodes
{
IPnew.resize(IPnew.n+1); IPnew(IPnew.n-1) = Iy(i);
JPnew.resize(JPnew.n+1); JPnew(JPnew.n-1) = Jy(i);
CPnew.resize(CPnew.n+1); CPnew(CPnew.n-1) = Ny(rowNumber)*Cy(i);	  
}
}

// update pMatrix
pMatrix = [IPnew,JPnew,CPnew];

if(writeMatrixToFile)
{
writeSparseMatrixToMfile(IP,JP,CP,IP.n,dataFolderName,"pMatrixBeforeBC");
writeSparseMatrixToMfile(IPnew,JPnew,CPnew,IPnew.n,dataFolderName,"pMatrixAfterBC");
}










